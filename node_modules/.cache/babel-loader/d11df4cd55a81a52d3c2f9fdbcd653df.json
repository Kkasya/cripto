{"ast":null,"code":"const roundSeparateNumber = data => {\n  let number = Math.abs(Number(data));\n  const options = {\n    'trillion': 't',\n    'billion': 'b',\n    'million': 'm'\n  };\n\n  if (number >= 1.0e+12) {\n    return (number / 1.0e+12).toFixed(2) + `${options.trillion}`;\n  }\n\n  if (number >= 1.0e+9) {\n    return (number / 1.0e+9).toFixed(2) + `${options.billion}`;\n  }\n\n  if (number >= 1.0e+6) {\n    return (number / 1.0e+6).toFixed(2) + `${options.million}`;\n  }\n\n  return Number(number.toFixed(2)).toLocaleString('ru');\n};\n\nconst getDetails = assetDetails => {\n  const assets = [...assetDetails];\n  let max = assets[0].priceUsd;\n  let min = assets[0].priceUsd;\n  let total = 0;\n  assets.forEach(asset => {\n    max = asset.priceUsd > max ? asset.priceUsd : max;\n    min = asset.priceUsd < min ? asset.priceUsd : min;\n    total += Number(asset.priceUsd);\n  });\n  const average = total / assets.length;\n  return {\n    max,\n    min,\n    average\n  };\n};\n\nexport { roundSeparateNumber, getDetails };","map":{"version":3,"sources":["J:/js/cripto/src/common/utils.js"],"names":["roundSeparateNumber","data","number","Math","abs","Number","options","toFixed","trillion","billion","million","toLocaleString","getDetails","assetDetails","assets","max","priceUsd","min","total","forEach","asset","average","length"],"mappings":"AAAA,MAAMA,mBAAmB,GAAIC,IAAD,IAAU;AACrC,MAAIC,MAAM,GAAGC,IAAI,CAACC,GAAL,CAASC,MAAM,CAACJ,IAAD,CAAf,CAAb;AAEA,QAAMK,OAAO,GAAG;AAChB,gBAAY,GADI;AAEhB,eAAW,GAFK;AAGhB,eAAW;AAHK,GAAhB;;AAMA,MAAIJ,MAAM,IAAI,OAAd,EAAuB;AACtB,WAAO,CAACA,MAAM,GAAG,OAAV,EAAmBK,OAAnB,CAA2B,CAA3B,IAAiC,GAAED,OAAO,CAACE,QAAS,EAA3D;AACA;;AAED,MAAIN,MAAM,IAAI,MAAd,EAAsB;AACrB,WAAO,CAACA,MAAM,GAAG,MAAV,EAAkBK,OAAlB,CAA0B,CAA1B,IAAgC,GAAED,OAAO,CAACG,OAAQ,EAAzD;AACA;;AAED,MAAIP,MAAM,IAAI,MAAd,EAAsB;AACrB,WAAO,CAACA,MAAM,GAAG,MAAV,EAAkBK,OAAlB,CAA0B,CAA1B,IAAgC,GAAED,OAAO,CAACI,OAAQ,EAAzD;AACA;;AAED,SAAOL,MAAM,CAAEH,MAAM,CAACK,OAAP,CAAe,CAAf,CAAF,CAAN,CAA4BI,cAA5B,CAA2C,IAA3C,CAAP;AACA,CAtBD;;AAwBA,MAAMC,UAAU,GAAIC,YAAD,IAAkB;AACpC,QAAMC,MAAM,GAAG,CAAC,GAAGD,YAAJ,CAAf;AACA,MAAIE,GAAG,GAAGD,MAAM,CAAC,CAAD,CAAN,CAAUE,QAApB;AACA,MAAIC,GAAG,GAAGH,MAAM,CAAC,CAAD,CAAN,CAAUE,QAApB;AACA,MAAIE,KAAK,GAAG,CAAZ;AAEAJ,EAAAA,MAAM,CAACK,OAAP,CAAgBC,KAAD,IAAW;AACzBL,IAAAA,GAAG,GAAIK,KAAK,CAACJ,QAAN,GAAiBD,GAAlB,GAAyBK,KAAK,CAACJ,QAA/B,GAA0CD,GAAhD;AACAE,IAAAA,GAAG,GAAIG,KAAK,CAACJ,QAAN,GAAiBC,GAAlB,GAAyBG,KAAK,CAACJ,QAA/B,GAA0CC,GAAhD;AACAC,IAAAA,KAAK,IAAIb,MAAM,CAACe,KAAK,CAACJ,QAAP,CAAf;AACA,GAJD;AAKA,QAAMK,OAAO,GAAGH,KAAK,GAAGJ,MAAM,CAACQ,MAA/B;AAEA,SAAO;AAACP,IAAAA,GAAD;AAAME,IAAAA,GAAN;AAAWI,IAAAA;AAAX,GAAP;AACA,CAdD;;AAgBA,SAAQrB,mBAAR,EAA6BY,UAA7B","sourcesContent":["const roundSeparateNumber = (data) => {\r\n\tlet number = Math.abs(Number(data));\r\n\r\n\tconst options = {\r\n\t'trillion': 't',\r\n\t'billion': 'b',\r\n\t'million': 'm',\r\n};\r\n\r\n\tif (number >= 1.0e+12) {\r\n\t\treturn (number / 1.0e+12).toFixed(2) + `${options.trillion}`;\r\n\t}\r\n\r\n\tif (number >= 1.0e+9) {\r\n\t\treturn (number / 1.0e+9).toFixed(2) + `${options.billion}`;\r\n\t}\r\n\r\n\tif (number >= 1.0e+6) {\r\n\t\treturn (number / 1.0e+6).toFixed(2) + `${options.million}`;\r\n\t}\r\n\r\n\treturn Number((number.toFixed(2))).toLocaleString('ru');\r\n};\r\n\r\nconst getDetails = (assetDetails) => {\r\n\tconst assets = [...assetDetails];\r\n\tlet max = assets[0].priceUsd;\r\n\tlet min = assets[0].priceUsd;\r\n\tlet total = 0;\r\n\r\n\tassets.forEach((asset) => {\r\n\t\tmax = (asset.priceUsd > max) ? asset.priceUsd : max;\r\n\t\tmin = (asset.priceUsd < min) ? asset.priceUsd : min;\r\n\t\ttotal += Number(asset.priceUsd);\r\n\t});\r\n\tconst average = total / assets.length;\r\n\r\n\treturn {max, min, average};\r\n}\r\n\r\nexport {roundSeparateNumber, getDetails};"]},"metadata":{},"sourceType":"module"}